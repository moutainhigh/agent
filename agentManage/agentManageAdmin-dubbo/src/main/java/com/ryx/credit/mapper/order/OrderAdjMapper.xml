<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ryx.credit.dao.order.OrderAdjMapper">
  <resultMap id="BaseResultMap" type="com.ryx.credit.pojo.admin.order.OrderAdj">
    <id column="ID" jdbcType="VARCHAR" property="id" />
    <result column="ORDER_ID" jdbcType="VARCHAR" property="orderId" />
    <result column="AGENT_ID" jdbcType="VARCHAR" property="agentId" />
    <result column="ADJ_USER_ID" jdbcType="VARCHAR" property="adjUserId" />
    <result column="ORG_O_AMO" jdbcType="DECIMAL" property="orgOAmo" />
    <result column="ORG_INCENTIVE_AMO" jdbcType="DECIMAL" property="orgIncentiveAmo" />
    <result column="ORG_PAY_AMO" jdbcType="DECIMAL" property="orgPayAmo" />
    <result column="O_AMO" jdbcType="DECIMAL" property="oAmo" />
    <result column="INCENTIVE_AMO" jdbcType="DECIMAL" property="incentiveAmo" />
    <result column="PAY_AMO" jdbcType="DECIMAL" property="payAmo" />
    <result column="RESON" jdbcType="VARCHAR" property="reson" />
    <result column="REFUND_AMOUNT" jdbcType="DECIMAL" property="refundAmount" />
    <result column="REFUND_TYPE" jdbcType="DECIMAL" property="refundType" />
    <result column="REFUND_STAT" jdbcType="DECIMAL" property="refundStat" />
    <result column="ORG_PAYMENT_ID" jdbcType="VARCHAR" property="orgPaymentId" />
    <result column="NEW_PAYMENT_ID" jdbcType="VARCHAR" property="newPaymentId" />
    <result column="REVIEWS_STAT" jdbcType="DECIMAL" property="reviewsStat" />
    <result column="REVIEWS_DATE" jdbcType="TIMESTAMP" property="reviewsDate" />
    <result column="ADJ_TM" jdbcType="TIMESTAMP" property="adjTm" />
    <result column="STATUS" jdbcType="DECIMAL" property="status" />
    <result column="VERSION" jdbcType="DECIMAL" property="version" />
    <result column="ORG_PLAN_NUM" jdbcType="DECIMAL" property="orgPlanNum" />
    <result column="STAGES_AMOUNT" jdbcType="DECIMAL" property="stagesAmount" />
    <result column="REFUND_TM" jdbcType="TIMESTAMP" property="refundTm" />
    <result column="SETTLE_AMOUNT" jdbcType="DECIMAL" property="settleAmount" />
    <result column="REAL_REFUND_AMO" jdbcType="DECIMAL" property="realRefundAmo" />
    <result column="REFUND_METHOD" jdbcType="DECIMAL" property="refundMethod" />
    <result column="PRO_REFUND_AMOUNT" jdbcType="DECIMAL" property="proRefundAmount" />
    <result column="OFFSET_AMOUNT" jdbcType="DECIMAL" property="offsetAmount" />
    <result column="DIF_AMOUNT" jdbcType="DECIMAL" property="difAmount" />
    <result column="LOGICAL_VERSION" jdbcType="DECIMAL" property="logicalVersion" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ID, ORDER_ID, AGENT_ID, ADJ_USER_ID, ORG_O_AMO, ORG_INCENTIVE_AMO, ORG_PAY_AMO, O_AMO, 
    INCENTIVE_AMO, PAY_AMO, RESON, REFUND_AMOUNT, REFUND_TYPE, REFUND_STAT, ORG_PAYMENT_ID, 
    NEW_PAYMENT_ID, REVIEWS_STAT, REVIEWS_DATE, ADJ_TM, STATUS, VERSION, ORG_PLAN_NUM, 
    STAGES_AMOUNT, REFUND_TM, SETTLE_AMOUNT, REAL_REFUND_AMO, REFUND_METHOD, PRO_REFUND_AMOUNT, 
    OFFSET_AMOUNT, DIF_AMOUNT, LOGICAL_VERSION
  </sql>
  <select id="selectByExample" parameterType="com.ryx.credit.pojo.admin.order.OrderAdjExample" resultMap="BaseResultMap">
    <include refid="OracleDialectPrefix" />
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from O_ORDER_ADJ
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <include refid="OracleDialectSuffix" />
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from O_ORDER_ADJ
    where ID = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByExample" parameterType="com.ryx.credit.pojo.admin.order.OrderAdjExample">
    delete from O_ORDER_ADJ
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ryx.credit.pojo.admin.order.OrderAdj">
    insert into O_ORDER_ADJ (ID, ORDER_ID, AGENT_ID, 
      ADJ_USER_ID, ORG_O_AMO, ORG_INCENTIVE_AMO, 
      ORG_PAY_AMO, O_AMO, INCENTIVE_AMO, 
      PAY_AMO, RESON, REFUND_AMOUNT, 
      REFUND_TYPE, REFUND_STAT, ORG_PAYMENT_ID, 
      NEW_PAYMENT_ID, REVIEWS_STAT, REVIEWS_DATE, 
      ADJ_TM, STATUS, VERSION, 
      ORG_PLAN_NUM, STAGES_AMOUNT, REFUND_TM, 
      SETTLE_AMOUNT, REAL_REFUND_AMO, REFUND_METHOD, 
      PRO_REFUND_AMOUNT, OFFSET_AMOUNT, DIF_AMOUNT, 
      LOGICAL_VERSION)
    values (#{id,jdbcType=VARCHAR}, #{orderId,jdbcType=VARCHAR}, #{agentId,jdbcType=VARCHAR}, 
      #{adjUserId,jdbcType=VARCHAR}, #{orgOAmo,jdbcType=DECIMAL}, #{orgIncentiveAmo,jdbcType=DECIMAL}, 
      #{orgPayAmo,jdbcType=DECIMAL}, #{oAmo,jdbcType=DECIMAL}, #{incentiveAmo,jdbcType=DECIMAL}, 
      #{payAmo,jdbcType=DECIMAL}, #{reson,jdbcType=VARCHAR}, #{refundAmount,jdbcType=DECIMAL}, 
      #{refundType,jdbcType=DECIMAL}, #{refundStat,jdbcType=DECIMAL}, #{orgPaymentId,jdbcType=VARCHAR}, 
      #{newPaymentId,jdbcType=VARCHAR}, #{reviewsStat,jdbcType=DECIMAL}, #{reviewsDate,jdbcType=TIMESTAMP}, 
      #{adjTm,jdbcType=TIMESTAMP}, #{status,jdbcType=DECIMAL}, #{version,jdbcType=DECIMAL}, 
      #{orgPlanNum,jdbcType=DECIMAL}, #{stagesAmount,jdbcType=DECIMAL}, #{refundTm,jdbcType=TIMESTAMP}, 
      #{settleAmount,jdbcType=DECIMAL}, #{realRefundAmo,jdbcType=DECIMAL}, #{refundMethod,jdbcType=DECIMAL}, 
      #{proRefundAmount,jdbcType=DECIMAL}, #{offsetAmount,jdbcType=DECIMAL}, #{difAmount,jdbcType=DECIMAL}, 
      #{logicalVersion,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.ryx.credit.pojo.admin.order.OrderAdj">
    insert into O_ORDER_ADJ
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="orderId != null">
        ORDER_ID,
      </if>
      <if test="agentId != null">
        AGENT_ID,
      </if>
      <if test="adjUserId != null">
        ADJ_USER_ID,
      </if>
      <if test="orgOAmo != null">
        ORG_O_AMO,
      </if>
      <if test="orgIncentiveAmo != null">
        ORG_INCENTIVE_AMO,
      </if>
      <if test="orgPayAmo != null">
        ORG_PAY_AMO,
      </if>
      <if test="oAmo != null">
        O_AMO,
      </if>
      <if test="incentiveAmo != null">
        INCENTIVE_AMO,
      </if>
      <if test="payAmo != null">
        PAY_AMO,
      </if>
      <if test="reson != null">
        RESON,
      </if>
      <if test="refundAmount != null">
        REFUND_AMOUNT,
      </if>
      <if test="refundType != null">
        REFUND_TYPE,
      </if>
      <if test="refundStat != null">
        REFUND_STAT,
      </if>
      <if test="orgPaymentId != null">
        ORG_PAYMENT_ID,
      </if>
      <if test="newPaymentId != null">
        NEW_PAYMENT_ID,
      </if>
      <if test="reviewsStat != null">
        REVIEWS_STAT,
      </if>
      <if test="reviewsDate != null">
        REVIEWS_DATE,
      </if>
      <if test="adjTm != null">
        ADJ_TM,
      </if>
      <if test="status != null">
        STATUS,
      </if>
      <if test="version != null">
        VERSION,
      </if>
      <if test="orgPlanNum != null">
        ORG_PLAN_NUM,
      </if>
      <if test="stagesAmount != null">
        STAGES_AMOUNT,
      </if>
      <if test="refundTm != null">
        REFUND_TM,
      </if>
      <if test="settleAmount != null">
        SETTLE_AMOUNT,
      </if>
      <if test="realRefundAmo != null">
        REAL_REFUND_AMO,
      </if>
      <if test="refundMethod != null">
        REFUND_METHOD,
      </if>
      <if test="proRefundAmount != null">
        PRO_REFUND_AMOUNT,
      </if>
      <if test="offsetAmount != null">
        OFFSET_AMOUNT,
      </if>
      <if test="difAmount != null">
        DIF_AMOUNT,
      </if>
      <if test="logicalVersion != null">
        LOGICAL_VERSION,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="agentId != null">
        #{agentId,jdbcType=VARCHAR},
      </if>
      <if test="adjUserId != null">
        #{adjUserId,jdbcType=VARCHAR},
      </if>
      <if test="orgOAmo != null">
        #{orgOAmo,jdbcType=DECIMAL},
      </if>
      <if test="orgIncentiveAmo != null">
        #{orgIncentiveAmo,jdbcType=DECIMAL},
      </if>
      <if test="orgPayAmo != null">
        #{orgPayAmo,jdbcType=DECIMAL},
      </if>
      <if test="oAmo != null">
        #{oAmo,jdbcType=DECIMAL},
      </if>
      <if test="incentiveAmo != null">
        #{incentiveAmo,jdbcType=DECIMAL},
      </if>
      <if test="payAmo != null">
        #{payAmo,jdbcType=DECIMAL},
      </if>
      <if test="reson != null">
        #{reson,jdbcType=VARCHAR},
      </if>
      <if test="refundAmount != null">
        #{refundAmount,jdbcType=DECIMAL},
      </if>
      <if test="refundType != null">
        #{refundType,jdbcType=DECIMAL},
      </if>
      <if test="refundStat != null">
        #{refundStat,jdbcType=DECIMAL},
      </if>
      <if test="orgPaymentId != null">
        #{orgPaymentId,jdbcType=VARCHAR},
      </if>
      <if test="newPaymentId != null">
        #{newPaymentId,jdbcType=VARCHAR},
      </if>
      <if test="reviewsStat != null">
        #{reviewsStat,jdbcType=DECIMAL},
      </if>
      <if test="reviewsDate != null">
        #{reviewsDate,jdbcType=TIMESTAMP},
      </if>
      <if test="adjTm != null">
        #{adjTm,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=DECIMAL},
      </if>
      <if test="version != null">
        #{version,jdbcType=DECIMAL},
      </if>
      <if test="orgPlanNum != null">
        #{orgPlanNum,jdbcType=DECIMAL},
      </if>
      <if test="stagesAmount != null">
        #{stagesAmount,jdbcType=DECIMAL},
      </if>
      <if test="refundTm != null">
        #{refundTm,jdbcType=TIMESTAMP},
      </if>
      <if test="settleAmount != null">
        #{settleAmount,jdbcType=DECIMAL},
      </if>
      <if test="realRefundAmo != null">
        #{realRefundAmo,jdbcType=DECIMAL},
      </if>
      <if test="refundMethod != null">
        #{refundMethod,jdbcType=DECIMAL},
      </if>
      <if test="proRefundAmount != null">
        #{proRefundAmount,jdbcType=DECIMAL},
      </if>
      <if test="offsetAmount != null">
        #{offsetAmount,jdbcType=DECIMAL},
      </if>
      <if test="difAmount != null">
        #{difAmount,jdbcType=DECIMAL},
      </if>
      <if test="logicalVersion != null">
        #{logicalVersion,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ryx.credit.pojo.admin.order.OrderAdjExample" resultType="java.lang.Long">
    select count(*) from O_ORDER_ADJ
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByPrimaryKeySelective" parameterType="com.ryx.credit.pojo.admin.order.OrderAdj">
    update O_ORDER_ADJ
    <set>
      <if test="orderId != null">
        ORDER_ID = #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="agentId != null">
        AGENT_ID = #{agentId,jdbcType=VARCHAR},
      </if>
      <if test="adjUserId != null">
        ADJ_USER_ID = #{adjUserId,jdbcType=VARCHAR},
      </if>
      <if test="orgOAmo != null">
        ORG_O_AMO = #{orgOAmo,jdbcType=DECIMAL},
      </if>
      <if test="orgIncentiveAmo != null">
        ORG_INCENTIVE_AMO = #{orgIncentiveAmo,jdbcType=DECIMAL},
      </if>
      <if test="orgPayAmo != null">
        ORG_PAY_AMO = #{orgPayAmo,jdbcType=DECIMAL},
      </if>
      <if test="oAmo != null">
        O_AMO = #{oAmo,jdbcType=DECIMAL},
      </if>
      <if test="incentiveAmo != null">
        INCENTIVE_AMO = #{incentiveAmo,jdbcType=DECIMAL},
      </if>
      <if test="payAmo != null">
        PAY_AMO = #{payAmo,jdbcType=DECIMAL},
      </if>
      <if test="reson != null">
        RESON = #{reson,jdbcType=VARCHAR},
      </if>
      <if test="refundAmount != null">
        REFUND_AMOUNT = #{refundAmount,jdbcType=DECIMAL},
      </if>
      <if test="refundType != null">
        REFUND_TYPE = #{refundType,jdbcType=DECIMAL},
      </if>
      <if test="refundStat != null">
        REFUND_STAT = #{refundStat,jdbcType=DECIMAL},
      </if>
      <if test="orgPaymentId != null">
        ORG_PAYMENT_ID = #{orgPaymentId,jdbcType=VARCHAR},
      </if>
      <if test="newPaymentId != null">
        NEW_PAYMENT_ID = #{newPaymentId,jdbcType=VARCHAR},
      </if>
      <if test="reviewsStat != null">
        REVIEWS_STAT = #{reviewsStat,jdbcType=DECIMAL},
      </if>
      <if test="reviewsDate != null">
        REVIEWS_DATE = #{reviewsDate,jdbcType=TIMESTAMP},
      </if>
      <if test="adjTm != null">
        ADJ_TM = #{adjTm,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        STATUS = #{status,jdbcType=DECIMAL},
      </if>
      <if test="version != null">
        VERSION = VERSION + 1,
      </if>
      <if test="orgPlanNum != null">
        ORG_PLAN_NUM = #{orgPlanNum,jdbcType=DECIMAL},
      </if>
      <if test="stagesAmount != null">
        STAGES_AMOUNT = #{stagesAmount,jdbcType=DECIMAL},
      </if>
      <if test="refundTm != null">
        REFUND_TM = #{refundTm,jdbcType=TIMESTAMP},
      </if>
      <if test="settleAmount != null">
        SETTLE_AMOUNT = #{settleAmount,jdbcType=DECIMAL},
      </if>
      <if test="realRefundAmo != null">
        REAL_REFUND_AMO = #{realRefundAmo,jdbcType=DECIMAL},
      </if>
      <if test="refundMethod != null">
        REFUND_METHOD = #{refundMethod,jdbcType=DECIMAL},
      </if>
      <if test="proRefundAmount != null">
        PRO_REFUND_AMOUNT = #{proRefundAmount,jdbcType=DECIMAL},
      </if>
      <if test="offsetAmount != null">
        OFFSET_AMOUNT = #{offsetAmount,jdbcType=DECIMAL},
      </if>
      <if test="difAmount != null">
        DIF_AMOUNT = #{difAmount,jdbcType=DECIMAL},
      </if>
      <if test="logicalVersion != null">
        LOGICAL_VERSION = #{logicalVersion,jdbcType=DECIMAL},
      </if>
    </set>
    where ID = #{id,jdbcType=VARCHAR} and VERSION = #{version,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ryx.credit.pojo.admin.order.OrderAdj">
    update O_ORDER_ADJ
    set ORDER_ID = #{orderId,jdbcType=VARCHAR},
      AGENT_ID = #{agentId,jdbcType=VARCHAR},
      ADJ_USER_ID = #{adjUserId,jdbcType=VARCHAR},
      ORG_O_AMO = #{orgOAmo,jdbcType=DECIMAL},
      ORG_INCENTIVE_AMO = #{orgIncentiveAmo,jdbcType=DECIMAL},
      ORG_PAY_AMO = #{orgPayAmo,jdbcType=DECIMAL},
      O_AMO = #{oAmo,jdbcType=DECIMAL},
      INCENTIVE_AMO = #{incentiveAmo,jdbcType=DECIMAL},
      PAY_AMO = #{payAmo,jdbcType=DECIMAL},
      RESON = #{reson,jdbcType=VARCHAR},
      REFUND_AMOUNT = #{refundAmount,jdbcType=DECIMAL},
      REFUND_TYPE = #{refundType,jdbcType=DECIMAL},
      REFUND_STAT = #{refundStat,jdbcType=DECIMAL},
      ORG_PAYMENT_ID = #{orgPaymentId,jdbcType=VARCHAR},
      NEW_PAYMENT_ID = #{newPaymentId,jdbcType=VARCHAR},
      REVIEWS_STAT = #{reviewsStat,jdbcType=DECIMAL},
      REVIEWS_DATE = #{reviewsDate,jdbcType=TIMESTAMP},
      ADJ_TM = #{adjTm,jdbcType=TIMESTAMP},
      STATUS = #{status,jdbcType=DECIMAL},
      VERSION = #{version,jdbcType=DECIMAL},
      ORG_PLAN_NUM = #{orgPlanNum,jdbcType=DECIMAL},
      STAGES_AMOUNT = #{stagesAmount,jdbcType=DECIMAL},
      REFUND_TM = #{refundTm,jdbcType=TIMESTAMP},
      SETTLE_AMOUNT = #{settleAmount,jdbcType=DECIMAL},
      REAL_REFUND_AMO = #{realRefundAmo,jdbcType=DECIMAL},
      REFUND_METHOD = #{refundMethod,jdbcType=DECIMAL},
      PRO_REFUND_AMOUNT = #{proRefundAmount,jdbcType=DECIMAL},
      OFFSET_AMOUNT = #{offsetAmount,jdbcType=DECIMAL},
      DIF_AMOUNT = #{difAmount,jdbcType=DECIMAL},
      LOGICAL_VERSION = #{logicalVersion,jdbcType=DECIMAL}
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <sql id="OracleDialectPrefix">
    <if test="page != null">
      select * from ( select row_.*, rownum rownum_ from ( 
    </if>
  </sql>
  <sql id="OracleDialectSuffix">
    <if test="page != null">
      <![CDATA[ ) row_ ) where rownum_ > #{page.begin} and rownum_ <= #{page.end} ]]>
    </if>
  </sql>
  <sql id="selectAgentUpModelViewSql">
    select oa.id as adj_id,
    oa.order_id,
    oa.adj_tm,
    oa.REVIEWS_STAT,
    oa.agent_id,
    oa.adj_user_id,
    (select ab.bus_num from a_agent_businfo ab
    left join o_order oo on oo.bus_id = ab.id
    where oo.id = oa.order_id and ab.status=1 and oo.status=1
    ) as bus_num,
    (select PLATFORM_NAME
    from A_PLATFORM ap
    left join a_agent_businfo ab on ap.platform_num =
    ab.bus_platform
    left join o_order on o_order.bus_id = ab.id
    where o_order.id = oa.order_id) as platform_name,
    cu.name as req_name,
    oa.refund_stat,
    oa.refund_tm,
    ag.ag_name,
    (select LISTAGG(o_sub_order.pro_name, ',') WITHIN
    GROUP(
    ORDER BY o_sub_order.order_id)
    from o_sub_order
    where o_sub_order.status = 1
    and o_sub_order.order_id = oa.order_id) as pro_name,
    (select LISTAGG(o_sub_order_activity.activity_name,',') WITHIN GROUP(ORDER BY oa.order_id)
      from o_sub_order_activity
      left join o_sub_order
      on o_sub_order_activity.sub_order_id =
      o_sub_order.id
      and o_sub_order.status = '1'
      where o_sub_order.order_id = oa.order_id  and o_sub_order_activity.status = '1'
      ) as activity_name,
      (select ab.id
      from a_agent_businfo ab
      left join o_order on o_order.bus_id = ab.id
      where o_order.id = oa.order_id) as bus_id,
      (select dq.name
      from c_organization dq
      left join a_agent_businfo ab on dq.id = ab.ag_doc_district
      left join o_order on o_order.bus_id = ab.id
      where o_order.id = oa.order_id) as ag_doc_district,
      (select sq.name
      from c_organization sq
      left join a_agent_businfo ab on sq.id = ab.ag_doc_pro
      left join o_order on o_order.bus_id = ab.id
      where o_order.id = oa.order_id) as ag_doc_pro
    from o_order_adj oa
    left join o_order oo on oa.order_id = oo.id
    and oo.status = 1
    left join a_agent ag on ag.id = oa.agent_id
    and ag.status = 1
    left join c_user cu on cu.id = oa.adj_user_id
    <where>
      <if test="map.userId!=null and map.userId!=''">oa.adj_user_id=#{map.userId}</if>
      <if test="1==1"> and oa.status=1 </if>
      <if test="map.agName!=null and map.agName!=''"> and ag.ag_name like concat(concat('%',#{map.agName}),'%') </if>
      <!--<if test="map.agUniqNum!=null and map.agUniqNum!=''"> and ag.ag_uniq_num = #{map.agUniqNum} </if>-->
      <if test="map.agUniqNum!=null and map.agUniqNum!=''"> and ag.id = #{map.agUniqNum} </if>
      <if test="map.refundId!=null and map.refundId!=''"> and oa.order_id = #{map.refundId} </if>
      <if test="map.reviewStatus!=null and map.reviewStatus!=''"> and oa.reviews_stat = #{map.reviewStatus} </if>
      <if test="map.proName!=null and map.proName!=''">
        and EXISTS
        (select * from o_sub_order os
        where os.pro_name like concat(concat('%',#{map.proName}),'%') and os.status = 1 and os.order_id = oa.order_id)
      </if>
      <if test="map.platform!=null and map.platform !=''">
        and EXISTS (select ab.bus_num
        FROM a_agent_businfo ab
        LEFT JOIN o_order oo
        ON oo.bus_id = ab.id
        WHERE oo.id = oa.order_id
        and ab.status = 1
        and oo.status = 1
        and  ab.bus_num= #{map.platform})
      </if>
      and EXISTS (select ab.id
      from a_agent_businfo ab
      left join o_order on o_order.bus_id = ab.id
      where o_order.id = oa.order_id
      <if test="map.platfromPerm!=null and map.platfromPerm.size>0">
        and ab.bus_platform in
        <foreach collection="map.platfromPerm" item="platfromPermItem" open="(" separator="," close=")">
          #{platfromPermItem.PLATFORM_NUM}
        </foreach>
      </if>
      <if test="map.platfromPerm==null or map.platfromPerm.size==0">
        and 1=-1
      </if>)
    </where>
    order by oa.adj_tm desc
  </sql>
  <select id="selectAgentUpModelView" parameterType="map" resultType="map">
    <include refid="OracleDialectPrefix"/>
    <include refid="selectAgentUpModelViewSql"/>
    <include refid="OracleDialectSuffix"/>
  </select>
  <select id="selectAgentUpModelViewCount" parameterType="map" resultType="int">
    select count(*) from(
    <include refid="selectAgentUpModelViewSql"/>)
  </select>

  <sql id="selectUpModelViewAllSql">
    select oa.id as adj_id,
    oa.order_id,
    oa.adj_tm,
    oa.REVIEWS_STAT,
    oa.agent_id,
    oa.adj_user_id,
    (select ab.bus_num from a_agent_businfo ab
    left join o_order oo on oo.bus_id = ab.id
    where oo.id = oa.order_id and ab.status=1 and oo.status=1
    ) as bus_num,
    (select PLATFORM_NAME
    from A_PLATFORM ap
    left join a_agent_businfo ab on ap.platform_num =
    ab.bus_platform
    left join o_order on o_order.bus_id = ab.id
    where o_order.id = oa.order_id) as platform_name,
    cu.name as req_name,
    oa.refund_stat,
    oa.refund_tm,
    ag.ag_name,
    (select LISTAGG(o_sub_order.pro_name, ',') WITHIN
    GROUP(
    ORDER BY o_sub_order.order_id)
    from o_sub_order
    where o_sub_order.status = 1
    and o_sub_order.order_id = oa.order_id) as pro_name,
    (select LISTAGG(o_sub_order_activity.activity_name,',') WITHIN GROUP(ORDER BY oa.order_id)
    from o_sub_order_activity
    left join o_sub_order
    on o_sub_order_activity.sub_order_id =
    o_sub_order.id
    and o_sub_order.status = '1'
    where o_sub_order.order_id = oa.order_id  and o_sub_order_activity.status = '1'
    ) as activity_name,
    (select ab.id
    from a_agent_businfo ab
    left join o_order on o_order.bus_id = ab.id
    where o_order.id = oa.order_id) as bus_id,
    (select dq.name
    from c_organization dq
    left join a_agent_businfo ab on dq.id = ab.ag_doc_district
    left join o_order on o_order.bus_id = ab.id
    where o_order.id = oa.order_id) as ag_doc_district,
    (select sq.name
    from c_organization sq
    left join a_agent_businfo ab on sq.id = ab.ag_doc_pro
    left join o_order on o_order.bus_id = ab.id
    where o_order.id = oa.order_id) as ag_doc_pro
    from o_order_adj oa
    left join o_order oo on oa.order_id = oo.id
    and oo.status = 1
    left join a_agent ag on ag.id = oa.agent_id
    and ag.status = 1
    left join c_user cu on cu.id = oa.adj_user_id
    <where>
      <if test="1==1"> and oa.status=1 </if>
      <if test="map.agName!=null and map.agName!=''"> and ag.ag_name like concat(concat('%',#{map.agName}),'%') </if>
      <if test="map.agUniqNum!=null and map.agUniqNum!=''"> and ag.id = #{map.agUniqNum} </if>
      <if test="map.refundId!=null and map.refundId!=''"> and oa.order_id = #{map.refundId} </if>
      <if test="map.reviewStatus!=null and map.reviewStatus!=''"> and oa.reviews_stat = #{map.reviewStatus} </if>
      <if test="map.proName!=null and map.proName!=''">
        and EXISTS
        (select * from o_sub_order os
        where os.pro_name like concat(concat('%',#{map.proName}),'%') and os.status = 1 and os.order_id = oa.order_id)
      </if>
      <if test="map.platform!=null and map.platform !=''">
        and EXISTS (select ab.bus_num
        FROM a_agent_businfo ab
        LEFT JOIN o_order oo
        ON oo.bus_id = ab.id
        WHERE oo.id = oa.order_id
        and ab.status = 1
        and oo.status = 1
        and  ab.bus_num= #{map.platform})
      </if>
      and EXISTS (select ab.id
      from a_agent_businfo ab
      left join o_order on o_order.bus_id = ab.id
      where o_order.id = oa.order_id
      <if test="map.platfromPerm!=null and map.platfromPerm.size>0">
        and ab.bus_platform in
        <foreach collection="map.platfromPerm" item="platfromPermItem" open="(" separator="," close=")">
          #{platfromPermItem.PLATFORM_NUM}
        </foreach>
      </if>
      <if test="map.platfromPerm==null or map.platfromPerm.size==0">
        and 1=-1
      </if>)
    </where>
    order by oa.adj_tm desc
  </sql>
  <select id="selectUpModelViewAll" parameterType="map" resultType="map">
    <include refid="OracleDialectPrefix"/>
    <include refid="selectUpModelViewAllSql"/>
    <include refid="OracleDialectSuffix"/>
  </select>
  <select id="selectUpModelViewAllCount" parameterType="map" resultType="int">
    select count(*) from(
    <include refid="selectUpModelViewAllSql"/>)
  </select>

  <!--订单数量调整导出(业务、财务)-->
  <select id="excelOrderAdjustAll" parameterType="map" resultMap="OrderAdjustVo">
    select
    adj.id as adj_Id,
    adj.order_id,
    adj.agent_id,
    ag.ag_name,
    (
      select ab.bus_num from a_agent_businfo ab
      left join o_order oo on oo.bus_id = ab.id
      where oo.id = adj.order_id and ab.status=1 and oo.status=1
    ) as bus_num,
    (
      select ap.platform_name from a_platform ap
      left join a_agent_businfo ab on ap.platform_num = ab.bus_platform
      left join o_order oo on oo.bus_id = ab.id
      where oo.id = adj.order_id and ab.status=1 and oo.status=1
    ) as platform_name,
    nvl((
      select oan.org_name
      from o_organization oan
      left join a_agent_businfo ab on ab.organ_num = oan.org_id
      where ab.id = oo.bus_id and oan.status=1 and ab.status=1
    ),'') as organ_num,
    (
      select LISTAGG(oso.activity_name,',') WITHIN GROUP(ORDER BY os.order_id)
      from o_sub_order_activity oso
      left join o_sub_order os on oso.sub_order_id = os.id and os.status=1
      where os.order_id = adj.order_id and oso.status=1
    ) as activity_name,
    (
      select LISTAGG(os.pro_name,',') WITHIN GROUP (ORDER BY os.order_id)
      from o_sub_order os
      where os.order_id = adj.order_id and os.status=1
    ) as pro_name,
    (
      select LISTAGG(oso.pro_model,',') WITHIN GROUP(ORDER BY os.order_id)
      from o_sub_order_activity oso
      left join o_sub_order os on oso.sub_order_id = os.id and os.status=1
      where os.order_id = adj.order_id and oso.status=1
    ) as model,
    nvl((
      select LISTAGG(os.pro_rel_price,',') WITHIN GROUP (ORDER BY os.order_id)
      from o_sub_order os
      where os.order_id = adj.order_id and os.status=1
    ),0) as pro_rel_price,
    nvl((
      select LISTAGG(os.pro_num,',') WITHIN GROUP (ORDER BY os.order_id)
      from o_sub_order os
      where os.order_id = adj.order_id and os.status=1
    ),0) as pro_num,
    nvl(oo.pay_amo,0) as pay_amo,
    cu.name as adj_user_id,
    (
      select dq.name
      from c_organization dq
      left join a_agent_businfo ab on dq.id = ab.ag_doc_district
      left join o_order on o_order.bus_id = ab.id
      where o_order.id = adj.order_id
    ) as ag_doc_district,
    (
      select sq.name
      from c_organization sq
      left join a_agent_businfo ab on sq.id = ab.ag_doc_pro
      left join o_order on o_order.bus_id = ab.id
      where o_order.id = adj.order_id
    ) as ag_doc_pro,
    to_char(adj.adj_tm,'yyyy-MM-dd') as adj_tm,
    adj.reviews_stat,
    adj.refund_stat,
    to_char(adj.refund_tm,'yyyy-MM-dd') as refund_tm
    from o_order_adj adj
    left join o_order oo on oo.id = adj.order_id and oo.status=1
    left join a_agent ag on ag.id = adj.agent_id and ag.status=1
    left join c_user cu on cu.id = adj.adj_user_id
    <where>
      <if test="1==1"> and adj.status=1 </if>
      <if test="agName!=null and agName!=''"> and ag.ag_name like concat(concat('%',#{agName}),'%') </if>
      <if test="agUniqNum!=null and agUniqNum!=''"> and ag.id = #{agUniqNum} </if>
      <if test="refundId!=null and refundId!=''"> and adj.order_id = #{refundId} </if>
      <if test="reviewStatus!=null and reviewStatus!=''"> and adj.reviews_stat = #{reviewStatus} </if>
      <if test="proName!=null and proName!=''">
        and EXISTS
        (select * from o_sub_order os
        where os.pro_name like concat(concat('%',#{proName}),'%') and os.status = 1 and os.order_id = adj.order_id)
      </if>
      <if test="platform!=null and platform !=''">
        and EXISTS
        (select ab.bus_num from a_agent_businfo ab
        left join o_order oo on oo.bus_id = ab.id
        where oo.id = adj.order_id and ab.status=1 and oo.status=1 and ab.bus_num = #{platform})
      </if>
      and EXISTS
      (select ab.id from a_agent_businfo ab
      left join o_order oo on oo.bus_id = ab.id
      where oo.id = adj.order_id
      <if test="platfromPerm!=null and platfromPerm.size>0">
        and ab.bus_platform in
        <foreach collection="platfromPerm" item="platfromPermItem" open="(" separator="," close=")">
          #{platfromPermItem.PLATFORM_NUM}
        </foreach>
      </if>
      <if test="platfromPerm==null or platfromPerm.size==0">
        and 1=-1
      </if>)
    </where>
    order by adj.adj_tm desc
  </select>
  <sql id="selectOrderAdjustDetailAllSql">
    select oa.id as adj_id,
           oa.order_id,
           oa.agent_id,
           ag.ag_name,
           ab.bus_num  as bus_num,
           (select platform_name
            from a_platform ap
            left join a_agent_businfo ab on ap.platform_num = ab.bus_platform
            left join o_order on o_order.bus_id = ab.id
            where o_order.id = oa.order_id) as platform_name,
           soa.activity_name,
           so.pro_name,
           soa.pro_model as model,
           so.pro_rel_price,
           oad.org_pro_num as pro_num,
           oad.org_pro_num * so.pro_rel_price as payAmo,
           oad.adj_num,
           oad.dif_amount,
           oa.pro_refund_amount,
           cu.name as adj_user_id,
          (
          select dq.name
          from c_organization dq
          left join a_agent_businfo ab on dq.id = ab.ag_doc_district
          left join o_order on o_order.bus_id = ab.id
          where o_order.id = oa.order_id
          ) as ag_doc_district,
          (
          select sq.name
          from c_organization sq
          left join a_agent_businfo ab on sq.id = ab.ag_doc_pro
          left join o_order on o_order.bus_id = ab.id
          where o_order.id = oa.order_id
          ) as ag_doc_pro,
           oa.adj_tm,
           oa.reviews_stat,
           nvl(oa.refund_stat,''),
           nvl(oa.refund_tm,''),
           oa.real_refund_amo,
           oa.reviews_date,
      (select max(o_order_adj.org_pay_amo) from o_order_adj where o_order_adj.order_id = oa.order_id)as current_amo,
    (select max(o_order_adj_detail.org_pro_num) from o_order_adj_detail where o_order_adj_detail.sub_order_id = oad.sub_order_id) as max_pro_num
    from o_order_adj_detail oad
           left join o_sub_order so on so.id = oad.sub_order_id
           left join o_order_adj oa on oad.adj_id = oa.id
           left join o_order oo on oa.order_id = oo.id and oo.status = 1
           left join a_agent ag on ag.id = oa.agent_id and ag.status = 1
           left join c_user cu on cu.id = oa.adj_user_id
           left join o_sub_order_activity soa on soa.sub_order_id = oad.sub_order_id  and soa.status = '1'
           left join a_agent_businfo ab on ab.id = oo.bus_id and ab.agent_id = oa.agent_id and ab.status=1
    <where>
      <if test="1==1"> and oa.status=1 </if>
      <if test="map.agName!=null and map.agName!=''"> and ag.ag_name like concat(concat('%',#{map.agName}),'%') </if>
      <if test="map.adjId!=null and map.adjId!=''"> and oad.adj_id = #{map.adjId} </if>
      <if test="map.agUniqNum!=null and map.agUniqNum!=''"> and ag.id = #{map.agUniqNum} </if>
      <if test="map.orderId!=null and map.orderId!=''"> and oa.order_id = #{map.orderId} </if>
      <if test="map.reviewStatus!=null and map.reviewStatus!=''"> and oa.reviews_stat = #{map.reviewStatus} </if>
      <if test="map.proName!=null and map.proName!=''">
        and EXISTS
        (select * from o_sub_order os
        where os.pro_name like concat(concat('%',#{map.proName}),'%') and os.status = 1 and os.id = oad.SUB_ORDER_ID)
      </if>
      <if test="map.userName!=null and map.userName!=''">
        and cu.name = #{map.userName}
      </if>
      <if test="map.platform!=null and map.platform !=''">
        and EXISTS (select ab.bus_num
        FROM a_agent_businfo ab
        LEFT JOIN o_order oo
        ON oo.bus_id = ab.id
        WHERE oo.id = oa.order_id
        and ab.status = 1
        and oo.status = 1
        and  ab.bus_num= #{map.platform})
      </if>
      <if test="map.busPlatform!=null and map.busPlatform!=''">
        and ab.bus_platform =  #{map.busPlatform}
      </if>
    </where>
    order by oa.ID desc
  </sql>
  <select id="selectOrderAdjustDetailAll" parameterType="map" resultMap="OrderAdjustVo">
    <include refid="OracleDialectPrefix"/>
    <include refid="selectOrderAdjustDetailAllSql"/>
    <include refid="OracleDialectSuffix"/>
  </select>
  <select id="selectOrderAdjustDetailAllCount" parameterType="map" resultType="java.lang.Integer">
    select count(*) from(
    <include refid="selectOrderAdjustDetailAllSql"/>)
  </select>
  <select id="excelOrderAdjustDetailAll" parameterType="map" resultMap="OrderAdjustVo">
    <include refid="selectOrderAdjustDetailAllSql"/>
  </select>
  <!--订单数量调整导出VO-->
  <resultMap id="OrderAdjustVo" type="com.ryx.credit.pojo.admin.vo.OrderAdjustVo">
    <result column="adj_Id" property="adjId" jdbcType="VARCHAR"/>
    <result column="refund_id" property="refundId" jdbcType="VARCHAR"/>
    <result column="order_id" property="orderId" jdbcType="VARCHAR"/>
    <result column="agent_id" property="agentId" jdbcType="VARCHAR"/>
    <result column="ag_name" property="agName" jdbcType="VARCHAR"/>
    <result column="bus_num" property="busNum" jdbcType="VARCHAR"/>
    <result column="platform_name" property="platformName" jdbcType="VARCHAR"/>
    <result column="organ_num" property="organNum" jdbcType="VARCHAR"/>
    <result column="activity_name" property="activityName" jdbcType="VARCHAR"/>
    <result column="pro_name" property="proName" jdbcType="VARCHAR"/>
    <result column="model" property="model" jdbcType="VARCHAR"/>
    <result column="pro_rel_price" property="proRelPrice" jdbcType="VARCHAR"/>
    <result column="pro_num" property="proNum" jdbcType="VARCHAR"/>
    <result column="pay_amo" property="payAmo" jdbcType="VARCHAR"/>
    <result column="pro_refund_amount" property="proRefundAmount" jdbcType="VARCHAR"/>
    <result column="offset_amount" property="offsetAmount" jdbcType="VARCHAR"/>
    <result column="real_refund_amo" property="realRefundAmo" jdbcType="VARCHAR"/>
    <result column="adj_user_id" property="adjUserId" jdbcType="VARCHAR"/>
    <result column="ag_doc_district" property="agDocDistrict" jdbcType="VARCHAR"/>
    <result column="ag_doc_pro" property="agDocPro" jdbcType="VARCHAR"/>
    <result column="adj_tm" property="adjTm" jdbcType="VARCHAR"/>
    <result column="reviews_stat" property="reviewsStat" jdbcType="VARCHAR"/>
    <result column="refund_stat" property="refundStat" jdbcType="VARCHAR"/>
    <result column="refund_tm" property="refundTm" jdbcType="VARCHAR"/>
    <result column="adj_num" property="adjNum" jdbcType="VARCHAR"/>
    <result column="dif_amount" property="difAmount" jdbcType="VARCHAR"/>
    <result column="current_amo" property="currentAmo" jdbcType="VARCHAR"/>
    <result column="max_pro_num" property="maxProNum" jdbcType="VARCHAR"/>
    <result column="reviews_date" property="reviewsDate" jdbcType="VARCHAR"/>
  </resultMap>
</mapper>