<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ryx.credit.profit.dao.PBalanceSerialMapper">
  <resultMap id="BaseResultMap" type="com.ryx.credit.profit.pojo.PBalanceSerial">
    <result column="BALANCE_ID" jdbcType="VARCHAR" property="balanceId" />
    <result column="BALANCE_BATCH_NO" jdbcType="VARCHAR" property="balanceBatchNo" />
    <result column="SETTLE_MONTH" jdbcType="VARCHAR" property="settleMonth" />
    <result column="SETTLE_DATE" jdbcType="VARCHAR" property="settleDate" />
    <result column="AG_ID" jdbcType="VARCHAR" property="agId" />
    <result column="AG_NAME" jdbcType="VARCHAR" property="agName" />
    <result column="BRAND_NO" jdbcType="VARCHAR" property="brandNo" />
    <result column="IMPORT_BATCH" jdbcType="VARCHAR" property="importBatch" />
    <result column="REAL_AG_ID" jdbcType="VARCHAR" property="realAgId" />
    <result column="REAL_AG_NAME" jdbcType="VARCHAR" property="realAgName" />
    <result column="BALANCE_AMT" jdbcType="DECIMAL" property="balanceAmt" />
    <result column="BALANCE_BANK_NO" jdbcType="VARCHAR" property="balanceBankNo" />
    <result column="BALANCE_BANK_NAME" jdbcType="VARCHAR" property="balanceBankName" />
    <result column="BALANCE_ACCT_TYPE" jdbcType="VARCHAR" property="balanceAcctType" />
    <result column="BALANCE_ACCT_NO" jdbcType="VARCHAR" property="balanceAcctNo" />
    <result column="BALANCE_ACCT_NAME" jdbcType="VARCHAR" property="balanceAcctName" />
    <result column="BALANCE_STATUS" jdbcType="VARCHAR" property="balanceStatus" />
    <result column="BALANCE_DESC" jdbcType="VARCHAR" property="balanceDesc" />
    <result column="SUBMIT_TER" jdbcType="VARCHAR" property="submitTer" />
    <result column="SUBMIT_TIME" jdbcType="VARCHAR" property="submitTime" />
    <result column="SYNC_TIME" jdbcType="VARCHAR" property="syncTime" />
    <result column="CHECK_STATUS" jdbcType="VARCHAR" property="checkStatus" />
    <result column="RECON_STATUS" jdbcType="VARCHAR" property="reconStatus" />
    <result column="RECON_REMARK" jdbcType="VARCHAR" property="reconRemark" />
    <result column="BALANCE_BANK_VERSION" jdbcType="VARCHAR" property="balanceBankVersion" />
    <result column="CKWC_TIME" jdbcType="VARCHAR" property="ckwcTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    BALANCE_ID, BALANCE_BATCH_NO, SETTLE_MONTH, SETTLE_DATE, AG_ID, AG_NAME, BRAND_NO, 
    IMPORT_BATCH, REAL_AG_ID, REAL_AG_NAME, BALANCE_AMT, BALANCE_BANK_NO, BALANCE_BANK_NAME, 
    BALANCE_ACCT_TYPE, BALANCE_ACCT_NO, BALANCE_ACCT_NAME, BALANCE_STATUS, BALANCE_DESC, 
    SUBMIT_TER, SUBMIT_TIME, SYNC_TIME, CHECK_STATUS, RECON_STATUS, RECON_REMARK, BALANCE_BANK_VERSION, 
    CKWC_TIME
  </sql>
  <select id="selectByExample" parameterType="com.ryx.credit.profit.pojo.PBalanceSerialExample" resultMap="BaseResultMap">
    <include refid="OracleDialectPrefix" />
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from P_BALANCE_SERIAL
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <include refid="OracleDialectSuffix" />
  </select>
  <delete id="deleteByExample" parameterType="com.ryx.credit.profit.pojo.PBalanceSerialExample">
    delete from P_BALANCE_SERIAL
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ryx.credit.profit.pojo.PBalanceSerial">
    insert into P_BALANCE_SERIAL (BALANCE_ID, BALANCE_BATCH_NO, SETTLE_MONTH, 
      SETTLE_DATE, AG_ID, AG_NAME, 
      BRAND_NO, IMPORT_BATCH, REAL_AG_ID, 
      REAL_AG_NAME, BALANCE_AMT, BALANCE_BANK_NO, 
      BALANCE_BANK_NAME, BALANCE_ACCT_TYPE, BALANCE_ACCT_NO, 
      BALANCE_ACCT_NAME, BALANCE_STATUS, BALANCE_DESC, 
      SUBMIT_TER, SUBMIT_TIME, SYNC_TIME, 
      CHECK_STATUS, RECON_STATUS, RECON_REMARK, 
      BALANCE_BANK_VERSION, CKWC_TIME)
    values (#{balanceId,jdbcType=VARCHAR}, #{balanceBatchNo,jdbcType=VARCHAR}, #{settleMonth,jdbcType=VARCHAR}, 
      #{settleDate,jdbcType=VARCHAR}, #{agId,jdbcType=VARCHAR}, #{agName,jdbcType=VARCHAR}, 
      #{brandNo,jdbcType=VARCHAR}, #{importBatch,jdbcType=VARCHAR}, #{realAgId,jdbcType=VARCHAR}, 
      #{realAgName,jdbcType=VARCHAR}, #{balanceAmt,jdbcType=DECIMAL}, #{balanceBankNo,jdbcType=VARCHAR}, 
      #{balanceBankName,jdbcType=VARCHAR}, #{balanceAcctType,jdbcType=VARCHAR}, #{balanceAcctNo,jdbcType=VARCHAR}, 
      #{balanceAcctName,jdbcType=VARCHAR}, #{balanceStatus,jdbcType=VARCHAR}, #{balanceDesc,jdbcType=VARCHAR}, 
      #{submitTer,jdbcType=VARCHAR}, #{submitTime,jdbcType=VARCHAR}, #{syncTime,jdbcType=VARCHAR}, 
      #{checkStatus,jdbcType=VARCHAR}, #{reconStatus,jdbcType=VARCHAR}, #{reconRemark,jdbcType=VARCHAR}, 
      #{balanceBankVersion,jdbcType=VARCHAR}, #{ckwcTime,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.ryx.credit.profit.pojo.PBalanceSerial">
    insert into P_BALANCE_SERIAL
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="balanceId != null">
        BALANCE_ID,
      </if>
      <if test="balanceBatchNo != null">
        BALANCE_BATCH_NO,
      </if>
      <if test="settleMonth != null">
        SETTLE_MONTH,
      </if>
      <if test="settleDate != null">
        SETTLE_DATE,
      </if>
      <if test="agId != null">
        AG_ID,
      </if>
      <if test="agName != null">
        AG_NAME,
      </if>
      <if test="brandNo != null">
        BRAND_NO,
      </if>
      <if test="importBatch != null">
        IMPORT_BATCH,
      </if>
      <if test="realAgId != null">
        REAL_AG_ID,
      </if>
      <if test="realAgName != null">
        REAL_AG_NAME,
      </if>
      <if test="balanceAmt != null">
        BALANCE_AMT,
      </if>
      <if test="balanceBankNo != null">
        BALANCE_BANK_NO,
      </if>
      <if test="balanceBankName != null">
        BALANCE_BANK_NAME,
      </if>
      <if test="balanceAcctType != null">
        BALANCE_ACCT_TYPE,
      </if>
      <if test="balanceAcctNo != null">
        BALANCE_ACCT_NO,
      </if>
      <if test="balanceAcctName != null">
        BALANCE_ACCT_NAME,
      </if>
      <if test="balanceStatus != null">
        BALANCE_STATUS,
      </if>
      <if test="balanceDesc != null">
        BALANCE_DESC,
      </if>
      <if test="submitTer != null">
        SUBMIT_TER,
      </if>
      <if test="submitTime != null">
        SUBMIT_TIME,
      </if>
      <if test="syncTime != null">
        SYNC_TIME,
      </if>
      <if test="checkStatus != null">
        CHECK_STATUS,
      </if>
      <if test="reconStatus != null">
        RECON_STATUS,
      </if>
      <if test="reconRemark != null">
        RECON_REMARK,
      </if>
      <if test="balanceBankVersion != null">
        BALANCE_BANK_VERSION,
      </if>
      <if test="ckwcTime != null">
        CKWC_TIME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="balanceId != null">
        #{balanceId,jdbcType=VARCHAR},
      </if>
      <if test="balanceBatchNo != null">
        #{balanceBatchNo,jdbcType=VARCHAR},
      </if>
      <if test="settleMonth != null">
        #{settleMonth,jdbcType=VARCHAR},
      </if>
      <if test="settleDate != null">
        #{settleDate,jdbcType=VARCHAR},
      </if>
      <if test="agId != null">
        #{agId,jdbcType=VARCHAR},
      </if>
      <if test="agName != null">
        #{agName,jdbcType=VARCHAR},
      </if>
      <if test="brandNo != null">
        #{brandNo,jdbcType=VARCHAR},
      </if>
      <if test="importBatch != null">
        #{importBatch,jdbcType=VARCHAR},
      </if>
      <if test="realAgId != null">
        #{realAgId,jdbcType=VARCHAR},
      </if>
      <if test="realAgName != null">
        #{realAgName,jdbcType=VARCHAR},
      </if>
      <if test="balanceAmt != null">
        #{balanceAmt,jdbcType=DECIMAL},
      </if>
      <if test="balanceBankNo != null">
        #{balanceBankNo,jdbcType=VARCHAR},
      </if>
      <if test="balanceBankName != null">
        #{balanceBankName,jdbcType=VARCHAR},
      </if>
      <if test="balanceAcctType != null">
        #{balanceAcctType,jdbcType=VARCHAR},
      </if>
      <if test="balanceAcctNo != null">
        #{balanceAcctNo,jdbcType=VARCHAR},
      </if>
      <if test="balanceAcctName != null">
        #{balanceAcctName,jdbcType=VARCHAR},
      </if>
      <if test="balanceStatus != null">
        #{balanceStatus,jdbcType=VARCHAR},
      </if>
      <if test="balanceDesc != null">
        #{balanceDesc,jdbcType=VARCHAR},
      </if>
      <if test="submitTer != null">
        #{submitTer,jdbcType=VARCHAR},
      </if>
      <if test="submitTime != null">
        #{submitTime,jdbcType=VARCHAR},
      </if>
      <if test="syncTime != null">
        #{syncTime,jdbcType=VARCHAR},
      </if>
      <if test="checkStatus != null">
        #{checkStatus,jdbcType=VARCHAR},
      </if>
      <if test="reconStatus != null">
        #{reconStatus,jdbcType=VARCHAR},
      </if>
      <if test="reconRemark != null">
        #{reconRemark,jdbcType=VARCHAR},
      </if>
      <if test="balanceBankVersion != null">
        #{balanceBankVersion,jdbcType=VARCHAR},
      </if>
      <if test="ckwcTime != null">
        #{ckwcTime,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ryx.credit.profit.pojo.PBalanceSerialExample" resultType="java.lang.Long">
    select count(*) from P_BALANCE_SERIAL
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <sql id="OracleDialectPrefix">
    <if test="page != null">
      select * from ( select row_.*, rownum rownum_ from ( 
    </if>
  </sql>
  <sql id="OracleDialectSuffix">
    <if test="page != null">
      <![CDATA[ ) row_ ) where rownum_ > #{page.begin} and rownum_ <= #{page.end} ]]>
    </if>
  </sql>


  <!--************************************以下为自动生成代码**********************************-->

  <select id="getListByMap" resultType="java.util.Map">
    <include refid="OracleDialectPrefix"/>
    <include refid="getListByMap_sql"/>
    <include refid="OracleDialectSuffix"/>
  </select>

  <select id="getCountByMap" resultType="java.lang.Long" >
    select count(1) from (
    <include refid="getListByMap_sql"/>
    ) zzz
  </select>

  <sql id="getListByMap_sql">
    select
    pb.BALANCE_ID, pb.BALANCE_BATCH_NO, pb.SETTLE_MONTH, pb.SETTLE_DATE, pb.AG_ID, pb.AG_NAME, pb.BRAND_NO,
     pb.REAL_AG_ID, pb.REAL_AG_NAME, pb.BALANCE_AMT, pb.BALANCE_BANK_NO, pb.BALANCE_BANK_NAME, pb.BALANCE_ACCT_TYPE,
    pb.BALANCE_ACCT_NO, pb.BALANCE_ACCT_NAME,  pb.BALANCE_DESC, pb.SUBMIT_TER, pb.SUBMIT_TIME, pb.SYNC_TIME, pb.CHECK_STATUS,
    pb.RECON_STATUS, pb.RECON_REMARK, pb.BALANCE_BANK_VERSION, pb.CKWC_TIME,
    cu.NAME,ap.PLATFORM_NAME,pa.NOTICE_TIME
    ,pp.BATCH_NO,pp.IMPORT_BATCH, /**导入批次**/
    case when pb.IMPORT_BATCH = '77' then '一次请款'
        when pb.IMPORT_BATCH = '88' then '二次请款'
        when pb.IMPORT_BATCH = '99' then '补出款'
        else '分润数据导入' end as PROFIT_TYPE, /**请款批次**/
    case when pb.BALANCE_STATUS='00' then '未出款'
          when pb.BALANCE_STATUS='01' then '出款中'
          when pb.BALANCE_STATUS='02' then '出款成功'
          when pb.BALANCE_STATUS='03' then '出款失败'
          else '未知' end as BALANCE_STATUS, /**结算状态**/
    case when pa.NOTICE_RESULT = '00' then '未通知'
          when pa.NOTICE_RESULT = '01' then '已通知'
          when pa.NOTICE_RESULT = '02' then '修改完成'
          else '' end NOTICE_RESULT  /**通知结果**/
    from P_BALANCE_SERIAL pb
    left join (
    select pr.* from P_REFUND_SERIAL pr
    inner join (
    select FIRST_BALANCE_ID,max(CK_TIME) CK_TIME
    from P_REFUND_SERIAL
    group by FIRST_BALANCE_ID
    ) pd
    on pr.FIRST_BALANCE_ID = pd.FIRST_BALANCE_ID and  pr.CK_TIME = pd.CK_TIME
    ) pa on pb.BALANCE_ID = pa.FIRST_BALANCE_ID
    left join C_USER cu on cu.ID = pb.SUBMIT_TER
    left join PMS_PROFIT pp on pb.BALANCE_ID = pp.BALANCE_ID
    left join A_PLATFORM ap on pb.BRAND_NO = ap.PLATFORM_NUM
    where 1= 1
    <if test="param.agDoc != '' and param.agDoc != null">
      and pb.AG_ID in (
      select distinct AGENT_ID from A_AGENT_BUSINFO
      where AG_DOC_PRO in
      ( select id from C_ORGANIZATION where PID = #{param.agDoc} ) or AG_DOC_PRO = #{param.agDoc}
      )
    </if>
    <if test="param.agDis != '' and param.agDis != null">
      and pb.AG_ID in (
      select distinct AGENT_ID from A_AGENT_BUSINFO
      where AG_DOC_DISTRICT = #{param.agDis}
      )
    </if>
    <if test="param.agentId != '' and param.agentId != null">
      and pb.AG_ID  = #{param.agentId}
    </if>
    <if test="param.agentName != '' and param.agentName != null">
      and pb.AG_NAME  = #{param.agentName}
    </if>
    <choose>
      <when test="param.startMonth != '' and param.startMonth !=null and param.endMonth !='' and param.endMonth != null ">
        and pb.SETTLE_MONTH between #{param.startMonth} and #{param.endMonth}
      </when>
      <when test="param.startMonth != '' and param.startMonth !=null">
        and pb.SETTLE_MONTH = #{param.startMonth}
      </when>
      <when test="param.endMonth != '' and param.endMonth !=null">
        and pb.SETTLE_MONTH = #{param.endMonth}
      </when>
    </choose>
    <if test="param.busPlayNum != '' and param.busPlayNum != null">
      and pb.BRAND_NO  = #{param.busPlayNum}
    </if>
    <if test="param.busPlayName != '' and param.busPlayName != null">
      and pb.BRAND_NO  = #{param.busPlayName}
    </if>
    <if test="param.balanceBatchId != '' and param.balanceBatchId != null">
      and pb.BALANCE_BATCH_NO  = #{param.balanceBatchId}
    </if>
    <choose>
      <when test="param.settleDateStart != '' and param.settleDateStart !=null and param.settleDateEnd !='' and param.settleDateEnd != null">
        and pb.SETTLE_DATE between #{param.settleDateStart} and #{param.settleDateEnd}
      </when>
      <when test="param.settleDateStart != '' and param.settleDateStart !=null">
        and pb.SETTLE_DATE = #{param.settleDateStart}
      </when>
      <when test="param.settleDateEnd != '' and param.settleDateEnd !=null">
        and pb.SETTLE_DATE = #{param.settleDateEnd}
      </when>
    </choose>
    <if test="param.importBatch != '' and param.importBatch != null">
      and pb.IMPORT_BATCH  = #{param.importBatch}
    </if>
    <if test="param.balanceId != '' and param.balanceId != null">
      and pb.BALANCE_ID  = #{param.balanceId}
    </if>
    <choose>
      <when test="param.paymentTimeStart != '' and param.paymentTimeStart !=null and param.paymentTimeEnd !='' and param.paymentTimeEnd != null">
        and pb.SYNC_TIME between #{param.paymentTimeStart} and #{param.paymentTimeEnd}
      </when>
      <when test="param.paymentTimeStart != '' and param.paymentTimeStart !=null">
        and pb.SYNC_TIME = #{param.settleDateStart}
      </when>
      <when test="param.paymentTimeEnd != '' and param.paymentTimeEnd !=null">
        and pb.SYNC_TIME = #{param.settleDateEnd}
      </when>
    </choose>
    order by pb.SYNC_TIME desc
  </sql>

  <select id="getRefundLog" resultType="java.util.Map" parameterType="java.lang.String">
    select pr.FIRST_BALANCE_ID,pr.CK_TIME,pr.REFUND_REMARK,
         pr.PRE_BALANCE_ID,pr.BALANCE_ID,'失败' as BALANCE_STATUS
    from P_REFUND_SERIAL pr
    where FIRST_BALANCE_ID  = #{balanceId}
    order by CK_TIME desc
  </select>

  <select id="statisticalData" resultType="java.util.Map">
    select count(1) as count,nvl(sum(zzz.BALANCE_AMT),0) as amt from (
    <include refid="getListByMap_sql"/>
    ) zzz
  </select>

</mapper>